import express from "express";
import moment from "moment";
import authHelper from "../helpers/auth";
const graph = require("@microsoft/microsoft-graph-client");
const router = express.Router();

// import ohelper from "../helpers/office";
import { dateValidator as validDate, timeValidator as validTime } from "../validators";

function validSegments(segments) {
  let valid = true;
  
  segments.forEach(segment => {
    if (validTime(segment.start) && validTime(segment.end) && segment.strength > 0) {
    } else {
      valid = false
    }
  });
  return valid;
}

async function getAvailability(startDateTime, endDateTime, workers, interval, accessToken) {
  const client = graph.Client.init({
    authProvider: (done) => {
      done(null, accessToken);
    }
  });

 const result = await client.api("/me/calendar/getschedule").version("beta")
  .post({
    Schedules: workers,
    // TODO: Change times to UTC
    StartTime: { dateTime: startDateTime, timeZone: "CST" },
    EndTime: { dateTime: endDateTime, timeZone: "CST" },
    availabilityViewInterval: interval
  });

  return result.value.reduce((accum, workerSchedule) => {
    const { scheduleId, availabilityView } = workerSchedule;
    accum[scheduleId] = availabilityView;
    return accum;
  }, {});
}

router.post("/createSchedule", async function(req, res, next) {
  /*
    // Use this format, or schedule will be
    strengthData: {
      "2018-11-07": [
          { start: "09:00", end: "11:00", worker: "justinr@bvu.edu" },
          { start: "11:00", end: "13:00", worker: "garrettb@bvu.edu" },
        ],
      "2018-11-08": [
          { start: "09:00", end: "11:00", worker: "justinr@bvu.edu" },
          { start: "11:00", end: "13:00", worker: "garrettb@bvu.edu" },
        ],
      
    };
*/
  
  const accessToken = await authHelper.getAccessToken(req.cookies, res);
  const { strengthData, range } = req.body;

  // TODO: Validate range data

  // Get the availability view of the workers on the time range
  // Then, for each segment find the indices on this array that
  // corresponds with its time
  let workers = [
    "rubejus@bvu.edu",
    "swanmat@bvu.edu",
    "mccokel@bvu.edu",
    "beebgar@bvu.edu",
    "martmic2@bvu.edu",
  ]

  /*
    getAvailability(Monday 8AM to 5PM, ...) = 
       { "rubejus@bvu.edu": "222000000", ... }
  */
  const availability = await getAvailability(range.start, range.end, workers, 60, accessToken);

  // Start all workers as having 0 hours this schedule
  // May need to adjust to function as a priority queue
  const hoursWorked = workers.map(email => ({ id: email, hours: 0 }));

  
  // Some stuff to help
  const dateTime = (date, time) => `${date}T${time}:00`;
  const availabilityStart = moment(new Date(range.start));
  // Validate strength data
  Object.keys(strengthData).forEach(dateString => {
    if (validDate(dateString) && validSegments(strengthData[dateString])) {
      // Proceed to the next stage
      strengthData[dateString].forEach(segment => {
        // TODO: Find the indices of the availability array corresponding to this segment
        // then, get slices of the array for each worker, their availability for this segment's
        // time frame.
        console.log(segment);
        let startDateString = dateTime(dateString, segment.start);
        let endDateString = dateTime(dateString, segment.end);
        // console.log(startDateString, endDateString)
        
        let segmentStart = moment(new Date(startDateString));
        let segmentEnd = moment(new Date(endDateString));
        
        let index = moment.duration(segmentStart.diff(availabilityStart)).asHours();
        let size = moment.duration(segmentEnd.diff(segmentStart)).asHours();

        console.log(`Start: ${segmentStart.format("YYYY-MM-DDTHH:MM:SS")} index: ${index} size: ${size}`);

        // Now, greedily pull
        let hoursCovered = 0;

        const isAvailable = (workerId, startIndex, duration) => {
          for (int i = startIndex; i < startIndex+duration; i++) {
            if (availability[workerId][i] != 0)
              return false;
          }
          return true;
        }

        while (hoursCovered < size) {
          for (int shiftLength = size - hoursCovered; shiftLength > 0; shiftLength--) {
            // Look at each employee by minimum number of hours in this schedule so far
            // Check if they are available from index + hoursCovered to index+shiftLength
            // If so, increment hoursCovered by shiftLength and mark down the workerId, shift start, and duration
          }
        }
         
      });
          
    } else {
      // Something is bad about the data
      
    }
  });
  
  // res.send(schedule);
  res.send(availability);
});

router.get("/", async function(req, res, next) {
  const accessToken = await authHelper.getAccessToken(req.cookies, res);
  const userName = req.cookies.graph_user_name;

  if (accessToken && userName) {
    res.send({ accessToken, userName});
  } else {
    res.redirect(authHelper.getAuthUrl());
  }
});

export default router;
